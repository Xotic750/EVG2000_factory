<html>
<head>
<% meta_get(); %>
<title>VLAN Group Settings</title> 
<link rel="stylesheet" href="form.css">
<STYLE TYPE="text/javascript">
	classes.num.all.fontFamily = "Courier";
	classes.num.all.fontSize = "10pt" ;
</style>
<script language="javascript" type="text/javascript" src="utility1.js"></script>
<script language="javascript" type="text/javascript" src="linux.js"></script>
<script language="javascript" type="text/javascript" src="func.js"></script>
<script language="javascript" type="text/javascript">
<!-- hide script from old browsers

if (typeof Array.prototype.splice == "undefined") {
  Array.prototype.splice = Array_splice
}


    var showit = "block"; 
    var hideit = "none";

	port_num = parseInt("<% vlan_cgi_get_param("port_num"); %>"); 
 	var vlan_num = parseInt("<% vlan_cgi_get_param("vlan_num"); %>");
	var port_vlan_map="<% vlan_cgi_get_param("port_vlan_map"); %>";//"0,1,2,3"; //this means port1:VLAN1   port 2: VLAN2...
	var interface ="<% vlan_cgi_get_param("interface"); %>";//"wl0,wl0.1,wl0.2,wl0.3,eth1,,,";//"wl0,wl0.1,eth1.2,eth1.3,eth1.4,eth1.5,nas_0_32,nas_1_32";// "wan1,wan2,wan3,wan4,wan5,wan6,wan7,wan8,vlan1,vlan2,vlan3,vlan4,ssid1,ssid2,ssid3,ssid4,phone1"; //all interfaces "wan0,eth1,eth1,eth2,wlan0,wlan2,wlan3,vlan0,vlan1,vlan2,vlan3,nas1"
	var group_num = parseInt("<% vlan_cgi_get_param("group_num"); %>");//parseInt("4");// 
	var group_map= "<% vlan_cgi_get_param("group_map"); %>";//"eth1:::";//":::";//"vlan1,ssid1,wan1:vlan2:vlan3:vlan4"; //[wan0,wlan0,vlan0:wan1,wlan1,vlan1:...] // symbol : separate each group
	var tags="<% vlan_cgi_get_param("tags"); %>";//"11,22,33,44";//
	var vlan_mode_cfg=parseInt("<% vlan_cgi_get_param("vlan_mode_cfg"); %>");//"1";//
	var vlan_status = parseInt("<% vlan_cgi_get_param("vlan_status"); %>");//"0";//
	var lan_status=-2;
	//var wmm_enable=parseInt("0");//0;//1:enable wmm 0: disable wmm
	var bak_group;
	var bak_group_lan;
	var bak_interface;
	var bak_interface_lan;
	var init_group = 0;
	var init_group_lan = 0;
	var vlan;
	
	//group_num = parseInt(group_num);
	var tagsArr = tags.split(",");
	if(tagsArr.length!=vlan_num) 
		tagsArr=Array(vlan_num); //prevent error
	
	var port_vlanArr = port_vlan_map.split(","); //[5][2][2][2]  this means port0:VLAN5   port 1,2,3: VLAN2
	if(port_vlanArr.length!=port_num) 
		port_vlanArr=Array(port_num); //prevent error
	
	var interfaceArr = interface.split(","); //[wan0][eth1][eth1][eth2][wlan0][wlan2]...
	bak_interface = interface.split(",");
	bak_interface_lan = interface.split(",");
	var interfacen = interfaceArr.length;
	
	for(var n=0;n<interfaceArr.length;n++)
	{
		if(interfaceArr[n] == undefined)
			continue;
		interfaceArr[n] = ChangeRNameToDName(interfaceArr[n]);
		bak_interface[n] = ChangeRNameToDName(bak_interface[n]);
		bak_interface_lan[n] = ChangeRNameToDName(bak_interface_lan[n]);
	}
	var groupArr = group_map.split(":"); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	bak_group = group_map.split(":");
	bak_group_lan = group_map.split(":");
	if(groupArr.length != group_num){
		alert("MAJOR ERROR: nvram groupn:"+group_num+  " does not match with group_map:"+ groupArr.length +". group_map err!");
		groupArr = Array(group_num);
	}

	for(var i=0;i<group_num;i++){
		groupArr[i] = groupArr[i].split("|"); // [wan0,wlan0,vlan0] => [wan0][wlan0][vlan0]
		bak_group[i] = bak_group[i].split("|"); // [wan0,wlan0,vlan0] => [wan0][wlan0][vlan0]
		bak_group_lan[i] = bak_group_lan[i].split("|"); // [wan0,wlan0,vlan0] => [wan0][wlan0][vlan0]
			
		for(var j=0;j<groupArr[i].length;j++)
		{
			groupArr[i][j] = ChangeRNameToDName(groupArr[i][j]);
			bak_group[i][j] = ChangeRNameToDName(bak_group[i][j]);
			bak_group_lan[i][j] = ChangeRNameToDName(bak_group_lan[i][j]);
		}
	}

var wan_number =parseInt("8");
var wan_name_all = ",,,,,,,";
var wan_nameArr = wan_name_all.split(",");
if(wan_nameArr.length!=wan_number) 
	wan_nameArr=Array(wan_number); //prevent error
if(wan_nameArr.length != wan_number){
	alert("MAJOR ERROR: nvram pvcn:"+wan_number+  " does not match with wan_names:"+ wan_nameArr.length +"!");
}

function autoNameWan(){
	var n;
	for (n=0;n<wan_nameArr.length;n++){
		if (wan_nameArr[n].length==0){
			wan_nameArr[n] = "WAN"+(n+1);
		}
	}
}

function onClickInterfaceList(){
	var cf = document.forms[0];
	var length = cf.interfaceList.options.length;
	if(cf.interfaceList.selectedIndex == -1)
		setTimeout("onClickInterfaceList()",100);
	if (cf.interfaceList.options.length>0 && cf.interfaceList.selectedIndex != -1)
		cf.add.disabled=0;
}

function onClickGroup_if_List()
{
	var cf = document.forms[0];
	if(cf.group_if.selectedIndex == -1)
		setTimeout("onClickGroup_if_List()",100);
	if (cf.group_if.options.length>0 && cf.group_if.selectedIndex != -1){
		cf.remove.disabled=0;
	}
}


function hasVlan(garr)
{
	var index, search;
	var cf = document.forms[0];

	index = searchArrForVW(search,garr);
	if (index != -1)
		return true;
	else
		return false;
}

function hasWan(garr)
{
	var found1=false;
	var found2=false;
	var index = searchArrForVW("wan",garr);

	if (index>=0)
		found1=true;
	
	for(var k=0;k<garr.length;k++){
		if(garr[k].length!=0){
			if(searchArr(garr[k],wan_nameArr)>=0){//found it
				found2=true;
			}
		}
	}

	if(found1||found2)
		return true;
	else
		return false;
}

function show_config_port_vlan(){
	var cf = document.forms[0];
	for(var i=0;i<port_num;i++){
		if (port_vlanArr[i]!=undefined){
			eval("cf.port" + i +  "[" + port_vlanArr[i] +  "].checked = 1");
		}
	}
}

function find_wan_num(name){
	for(var n=0;n<wan_nameArr.length;n++){
		if(name==wan_nameArr[n]){
			return num;
			break;
		}
	}
	return -1;
}
function debug(title){
	var tmp="";
	var sep = " ......";
	var bk = "\n";
	tmp += "DEBUG: "+title+bk+bk;
	tmp += "interfaceArr.len= "+interfaceArr.length+bk;
	tmp += "interfaceArr[]= "+interfaceArr+bk;
	tmp += "port_vlan_arr.len= "+port_vlanArr.length+bk;
	tmp += "port_vlan_arr[]= "+port_vlanArr+bk;
	tmp += "groupArr.len= "+groupArr.length+bk;	
	for(var x=0;x<groupArr.length;x++){	
		tmp += "groupArr[" + x + "]="+groupArr[x]+sep+groupArr[x].length+bk;
	}
	alert(tmp);
}

function name2wan(){
	var loop=0;
	for (var k=0;k<wan_nameArr.length;k++){
		for(var n=0;n<interfaceArr.length;n++){
			if(interfaceArr[n]==wan_nameArr[k]){
				interfaceArr[n] = "wan"+(k+1); //wanX
				n=999; //exit only this loop
			}
		}

		for(var n=0;n<groupArr.length;n++){
			loop=groupArr[n].length; //firefox BUG: we can't directly access .length property in for loop
			for(var x=0;x<loop;x++){
				if(groupArr[n][x]==wan_nameArr[k]){
					groupArr[n][x] = "wan" +(k+1);
					x=999;
					n=999;
				}
			}
		}
	}
}

function wan2name(){
	var wanX;
	var loop=0;
	for (var k=0;k<wan_nameArr.length;k++){
		wanX = "wan"+(k+1);
		for(var m=0;m<interfaceArr.length;m++){
			if(interfaceArr[m]==wanX){
				interfaceArr[m] = wan_nameArr[k]; //get name
				n=999; //exit only this loop
			}
		}
		for(var n=0;n<groupArr.length;n++){
			loop=groupArr[n].length; //firefox BUG: we can't directly access .length property in for loop
			for(var x=0;x<loop;x++){
				if(groupArr[n][x].indexOf(wanX) != -1 ){
					groupArr[n][x] = wan_nameArr[k]; //get name
					x=999;
					n=999;
				}
			}
		}
	}
}

function tag2port(){
	for(var n=0;n<interfaceArr.length;n++){
	    if(interfaceArr[n]==undefined)
	    	continue;
		interfaceArr[n] = interfaceArr[n].replace("tag","vlan");
	}
	for(var n=0;n<groupArr.length;n++){
		for(var x=0;x<groupArr[n].length;x++){
		    if(groupArr[n][x]==undefined)
		    	continue;
			groupArr[n][x] = groupArr[n][x].replace("tag","vlan");
		}
	}
	show_interface();
	show_group_list();
}

function port2tag(){
	for(var n=0;n<interfaceArr.length;n++){
	    if(interfaceArr[n]==undefined)
	    	continue;
		interfaceArr[n] = interfaceArr[n].replace("vlan","tag");
	}
	for(var n=0;n<groupArr.length;n++){
		for(var x=0;x<groupArr[n].length;x++){
		    if(groupArr[n][x]==undefined)
		    	continue;
			groupArr[n][x] = groupArr[n][x].replace("vlan","tag");
		}
	}

	show_interface();
	show_group_list();
}
	
function show_group()
{
	var tmp = "";
	var garr;

	for(var i = 0; i < group_num; i++)
	{
		garr =  groupArr[i]; //when not selected, selectedIndex become -1 ?
		if(garr.length > 0 && garr[0].length > 0)
			tmp += '<option value='+ i + '>GROUP'+ (i+1) +'</option>';
		else
			tmp += '<option value='+ i + '>GROUP'+ (i+1) + ' *' + '</option>';
	}  
	document.write(tmp);
}

function show_group_list(){
	var cf = document.forms[0];
	var garr =  groupArr[cf.groupBox.selectedIndex]; //when not selected, selectedIndex become -1 ?
	cf.group_if.options.length=0; //flush out all the items
	if(garr == undefined)
		return;
	
	for(i=0;i<garr.length;i++){
		if(garr[i].length != 0)
			cf.group_if.options[i] = new Option(garr[i], garr[i]);
	}
}

function show_tags(){
	var tmp="";
	if(vlan_num<=1){
		alert("VLAN number should NOT <= 1   !");
		return false;
	}
	
	for(var i = 1; i < vlan_num; i++){
		if(tagsArr[i]!=undefined)
			tmp+='<tr><td colspan="">Tag '+ (i+1) +':</td><td><input type="text" class="num" name="tags" value="' + tagsArr[i] +  '" size="18" maxlength="18"></td></tr>';
		else
			tmp+='<tr><td colspan="">Tag '+ (i+1) +':</td><td><input type="text" class="num" name="tags" value="" size="18" maxlength="18"></td></tr>';
	}
    document.write(tmp);

}

function show_interface()
{
	var cf = document.forms[0];
	cf.interfaceList.options.length=0;//flush out all the items

	for(i=0;i<interfaceArr.length;i++){
		if(interfaceArr[i]!=undefined)
			cf.interfaceList.options[i] = new Option(interfaceArr[i], interfaceArr[i]);
	}
}

function set_port_vlan(selectedPort, selectedVlan){
	var cf = document.forms[0];
	port_vlanArr[selectedPort] = ""+selectedVlan; //convert int to string
}

function pushIntoArray(arr,item){
	if(item == undefined)
		return arr;
	if(arr.length==1){
		if(arr[0].length==0){
			arr[0] = item;
		}
		else{
			arr.push(item);
		}
	}
	else{
		arr.push(item);
	}
	return arr;
}

function add_interface(){
	var cf = document.forms[0];
	var iflist = cf.interfaceList;
	var g_idx = cf.groupBox.selectedIndex;
	var item;
	var success=1;
	var garr =  groupArr[g_idx]; //get the target array
	var if_idx;
	
	for(var x=0;x<iflist.options.length;x++){ //search through the interfaceList 
		if(iflist.options[x].selected){ //for all selected items
			item = iflist.options[x].value;
			
			if(item.indexOf("vlan")>=0){ //if the new item is vlanX
				if(hasVlan(garr)){//target array already has vlan
					alert("Action canceled: only one VLAN can be assigned to a group.");
					success = 0;
					break;
				}
			}
			if(item.indexOf("tag")>=0){ //if the new item is vlanX
				if(hasVlan(garr)){//target array already has vlan
					alert("Action canceled: only one TAG can be assigned to a group.");
					success = 0;
					break;
				}
			}			
			if((item.indexOf("wan")>=0)||(searchArr(item,wan_nameArr)>=0)){ //if the new item is wanX
				if(hasWan(garr)){//target array already has vlan
					alert("Action canceled: only one WAN can be assigned to a group.");
					success = 0;
					break;
				}
			}

			
			garr = pushIntoArray(garr,item);
			if_idx = searchArr(item,interfaceArr);
			interfaceArr.splice(if_idx,1);
		}
	}

	cf.add.disabled= true; //add over, set add button to disable,
	groupArr[g_idx]=garr; //update the target array
	show_interface();
	show_group_list();
}

function remove_interface(){
	var cf = document.forms[0];
	var iflist = cf.group_if;
	var g_idx = cf.groupBox.selectedIndex;
	var item;
	var success=1;
	var garr =  groupArr[g_idx]; 
	var if_idx;
	for(x=0;x<iflist.options.length;x++){ //search through the group_if list 
		if(iflist.options[x].selected){ //for all selected items
			item = iflist.options[x].value;

			interfaceArr.push(item);
			if_idx = searchArr(item,garr);
			if (if_idx==-1) alert("idx == -1");
			garr.splice(if_idx,1);
		}
	}

	cf.remove.disabled= true; //add over, set remove button to disable,
	groupArr[g_idx]=garr; //update the target array
	show_interface();
	show_group_list();
}


function searchArr(str,arr){ //search through the array and return the index of the first occurance of str
	if(arr.length == 0)
		return -1;
	
	for(i=0;i<arr.length;i++){
		if(arr[i] == undefined)
			continue;
		if(arr[i].indexOf(str)>=0 && arr[i]==str){ //fireFox bug. it does not recognize that garr is an array
			return i;
			break;
		}
	}
	return -1;
}

function searchArrForVW(str,arr){ //search through the array and return the index of the first occurance of str
	if(arr.length == 0)
		return -1;
	
	for(i=0;i<arr.length;i++){
		if(arr[i] == undefined)
			continue;
		if(arr[i].indexOf(str)>=0){ //fireFox bug. it does not recognize that garr is an array
			return i;
		}
	}
	return -1;
}


function ChangeRNameToDName(name){
switch (name){
	case 'eth0':
		return 'lan';
	        break;
	case 'wl0':
		return 'ssid1';
	case 'wl0.1':
		return 'ssid2';
	case 'wl0.2':
		return 'ssid3';
       case 'wl0.3':
	        return 'ssid4';
	default:
		return name;
      }
}

function ChangeDNameToRName(name){
	var vlanGroup = Array(4);
	var vlanNo;
	var tagName;
	var cf = document.forms[0];
	
	switch (name){
		case 'lan':
			return 'eth0';
		
		case 'tag1':
			return 'vlan1';
	
		case 'tag2':
			return 'vlan2';
		
		case 'tag3':
			return 'vlan3';
	
	      case 'tag4':
			return 'vlan4';
	
		default:
			return name;
	      }

}

function ChangeRNameToDName2(name){
switch (name){
	case 'wl0':
		return 'ssid1';
	case 'wl0.1':
		return 'ssid2';
	case 'wl0.2':
		return 'ssid3';
       case 'wl0.3':
	        return 'ssid4';
	default:
		return name;
      }

}

function ChangeDNameToRName2(name){
switch (name){
	case 'ssid1':
		return 'wl0';
	case 'ssid2':
		return 'wl0.1';
	case 'ssid3':
		return 'wl0.2';
       case 'ssid4':
	        return 'wl0.3';
	default:
		return name;
      }
}

function setInterfaceRemained(){
	var ifArr = interfaceArr;
	var tmp = groupArr.join("|"); //we need to convert Arry into string, so that comparison is possible
	for(x=0;x<ifArr.length;x++){
		if(tmp.indexOf(ifArr[x])>=0){
			removeElemFromArray(ifArr[x], interfaceArr);
			x--; //index value should shift back 1 so that next element is not skipped
		}
	}
	show_interface();
	show_group_list();
}

function removeElemFromArray(elem, arr){
	if(arr.length == 0)
		return -1;
	for(x=0;x<arr.length;x++){
		if(arr[x] == undefined)
			continue;
		if(arr[x]==elem){
			arr.splice(x,1);
			break;
		}
	}
}

function arrayToHidden(){
	var cf = document.forms[0];
	var result;
	var if_idx1;
	var group0;
	var iflist = cf.interfaceList;
	var group = new Array(0);
	
	for(var x=0;x<iflist.options.length;x++){
		iflist.options[x].value = ChangeDNameToRName(iflist.options[x].value);
		iflist.options[x].value = ChangeDNameToRName2(iflist.options[x].value);
		group = pushIntoArray(group,iflist.options[x].value);
	}
	group0 = group.join("|"); 
	for(var x=0;x<groupArr.length;x++){
		for(var j=0;j<groupArr[x].length;j++)
		{
			groupArr[x][j] = ChangeDNameToRName(groupArr[x][j]);
			groupArr[x][j] = ChangeDNameToRName2(groupArr[x][j]);
		}
		for(j=0;j<groupArr[x].length;j++)
		{
			if(groupArr[x][j] == "" || groupArr[x][j] == undefined)
				groupArr[x].splice(j,1);
		}
		result = groupArr[x].join("|");
		groupArr[x]=result;
	}
	result = groupArr.join(":");
	cf.group_map.value=result;
	
	cf.h_vlan_map.value = port_vlanArr.join(",");
	cf.enableVlan.value=1;
	cf.tags1.value = cf.tags[1].value;
	cf.tags2.value = cf.tags[2].value;
	cf.tags3.value = cf.tags[3].value;    
	alert("WARNING\nThese setting will change the device connection behavior.\nIf you have modified Group Mappings, you may need to change your cable to a different port socket based on your new setting.\nIf the device fail to reconnect back to this Admin page, it is most likely that you have used a wrong port socket.\nAlso, please ensure that your new IP MUST BE under the same subnet as the connected port.\nYou may need to reboot your PC or restart network card to obtain a correct IP.");
	return true;
}

function decide_mode(){
	var cf = document.forms[0];	
	var if_idx;
	if(vlan_status == 1) //vlan enable
	{
		setInterfaceRemained();
		enable_vlan();
		show_config_port_vlan();
	}
	else
	{
		setInterfaceRemained();
		enable_vlan();
	}

}

function setDivs_port(){
	var cf = document.forms[0];	
	document.all("portDIV").style.display = showit;	
	document.all("tagDIV").style.display = hideit;	
	show_config_port_vlan();
	tag2port();
	cf.add.disabled=1;
	cf.remove.disabled=1;
}

function setDivs_tag(){
	var cf = document.forms[0];	
	document.all("tagDIV").style.display = showit;	    
	document.all("portDIV").style.display = hideit;
	port2tag();
	cf.add.disabled=1;
	cf.remove.disabled=1;
}

function show_first_row()
{
	var tmp = "";
        for(var i = 1; i <=port_num; i++)
        {            
            tmp += '<td align="center"><span class="thead">Port '+i+' </span></td>';
        }  
 
    document.write(tmp);
}

function show_vlan_port()
{
	var tmp = "";
        for(var j = 0; j < vlan_num; j++){
		  tmp += '<tr><td align="center"><span class="thead">vlan'+(j+1)+'</span></td>'
          
		  for(var i = 0; i <port_num; i++)    
		{
			tmp += '<td align="center"><input type="radio" name="port'+i+'" value="'+j+'" onClick="set_port_vlan('  + i +   ', ' + j + ')"></td>'
		}
		tmp += '</tr>';   
       }  
		 
    document.write(tmp);
}

function on_enable_vlan(){
	var cf = document.forms[0];	

	enable_vlan();

}

function enable_vlan(){
	var cf = document.forms[0];	
	var garr; //get the target array
	var garr1; //get the target array
	var if_idx;
	var if_idx1;
	var inf = interfaceArr.slice(0);
	var i;
	
	cf.add.disabled=1;
	cf.remove.disabled=1;
    {
		for(i=0;i<vlan_num;i++)
			bak_group_lan[i] = groupArr[i].slice(0);
		bak_interface_lan = interfaceArr.slice(0);
		for(i=0;i<vlan_num;i++)
			groupArr[i] = bak_group[i].slice(0);
		inf = interfaceArr = bak_interface.concat();
		setInterfaceRemained();
		if(init_group == 0 && vlan_status == 0)
		{
			for(var i=0;i<vlan_num;i++)
			{
				garr = "vlan" + (i + 1);
				if_idx = searchArr(garr, groupArr[i]);
				if (if_idx==-1) 
					groupArr[i] = pushIntoArray(groupArr[i],garr);
			}
			for(i=0;i<groupArr.length;i++)
			{
				if_idx = searchArr("lan", groupArr[i]);
				if (if_idx >= 0) 
				{
					lan_status = i;
					removeElemFromArray("lan", groupArr[i]);
				}
			}
			if_idx = searchArr("lan", interfaceArr);
			if (if_idx!=-1) 
			{
				lan_status = -1;
				removeElemFromArray("lan", inf);
			}
			init_group = 1;
		}

		setDivs_port();//port base

	}

	interfaceArr=inf.slice(0); //update the target array
	show_interface();
	show_group_list();
}


//remove specified index
function Array_splice(index, delTotal) { // ex: (5, 2) --> delete 2 contiguos items start from index 5
  var temp = new Array()
  var response = new Array()
  var A_s = 0
  for (A_s = 0; A_s < index; A_s++) {
   temp[temp.length] = this[A_s]
   }
  for (A_s = 2; A_s < arguments.length; A_s++) {
   temp[temp.length] = arguments[A_s]
   }
  for (A_s = index + delTotal; A_s < this.length; A_s++) {
   temp[temp.length] = this[A_s]
   }
  for (A_s = 0; A_s < delTotal; A_s++) {
   response[A_s] = this[index + A_s]
   }
  this.length = 0
  for (A_s = 0; A_s < temp.length; A_s++) {
   this[this.length] = temp[A_s]
   }
  return response
}
// -->
</script> 
</head>
<body bgcolor="#ffffff" onLoad="decide_mode();loadhelp('VLAN');">

<form name="formname" method="POST" action="vlan.cgi">
  <table border="0" cellpadding="0" cellspacing="3" width="100%">
    <tr> 
      <td colspan="3"><h1>VLAN Group  Settings</h1></td>
    </tr>
<!-------------------------------------------Port/Tag base radio--------------------------------------->
	<tr>
      <td nowrap colspan="3">
<!-------------------------- VLAN / PORT MAP-------------------------------->
	  <div ID="portDIV">
	  <table width="100%">
	       <tr> <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td>   </tr>
	  <tr><td><b>Port Based VLAN</b></td></tr>
	  
    <tr> 
      <td nowrap colspan="">
	  <table border="1" cellpadding="0" cellspacing="0" width="100%">
        <tr>
          <td align="center"><span class="thead">VLAN Group/Port </span></td>
          <script>show_first_row();</script>

        </tr>
		<script>show_vlan_port();</script>

      </table></td></tr>
	  <tr><td>&nbsp;</td></tr>
	  <tr> 

      <td colspan="" background="liteblue.gif" height="">&nbsp;</td>
    </tr></table></div>	  	  	 


	<!-------------------------------------------Tag text input--------------------------------------->
	  <div ID="tagDIV" style="display:yes">
    
	  <table width="100%">	     
<tr> <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td>   </tr>
      <tr>
 	 <td >Tag 1:</td>
        <td ><input type="text" class="num" name="tags" value="all the untagged" size="18" maxlength="18" disabled></td>
      </tr>
		<script>show_tags();</script>
	  <tr><td colspan="2">&nbsp;</td></tr>
      <tr> 
      <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td>
    </tr></table></div>
	</td></tr>	
	
    <tr>
       <td colspan="2"><b>Interface Grouping</b></a></td>
       <td>&nbsp;</td>
</tr>
<tr>
  <td colspan="">&nbsp;</td>
  <td>&nbsp;</td>
  <td>
      <!-------------------------------------------Group List--------------------------------------->
  <select name="groupBox" size="1" onClick="show_group_list();" style="width:150px">
	<script>show_group()</script>
  </select></td>
</tr>
<tr>
      <td rowspan="4">

     <!-------------------------------------------Interface List--------------------------------------->
      <select name="interfaceList" size="12" multiple onClick="onClickInterfaceList();" style="width:150px">
      		<script>show_interface();</script>
	</select>

      </td>
      <td>&nbsp;</td>
      <td rowspan="4">	  
	  <select name="group_if" size="12" multiple onClick="onClickGroup_if_List();" style="width:150px"> <!-- insert items dynamically -->
	  <script>show_group_list()</script>
      </select> 	  
	  </td>
</tr>

<tr>
      <td rowspan="1" align="center">
	    <input type="button"  name="add" value="     Add    >>" onClick="add_interface();" disabled></td>
</tr>

<tr>
      <td colspan="" align="center">
      <input type="button"  name="remove" value="<<  Remove" onClick="remove_interface();" disabled></td>
</tr>
<tr>
     <td colspan="1">&nbsp;</td>
     <td width="0%">&nbsp;</td>
     <td width="0%">&nbsp;</td>
</tr>
<tr><td colspan="3">&nbsp;</td></tr>
<tr><td colspan="3" background="liteblue.gif" height="12">&nbsp; </td></tr>
<tr> 
  <td colspan="3" align="center"> 
    <input type="submit" name="apply" value="Apply/Reboot" onClick="if (!arrayToHidden())return false;dataToHidden(document.forms[0]);">
 <input type="RESET" name="Cancel" value="Cancel" onClick="location.href='VLAN.htm'">
</tr>
</table>

<input type="hidden" name="todo" value="save">
<input type="hidden" name="h_vlan_map" >
<input type="hidden" name="group_map" >
<input type="hidden" name="h_vlan_mode" value="0">
<input type="hidden" name="h_vlan_on" value="enable">
<input type="hidden" name="alltags" >
<input type="hidden" name="groupItem" value="0">
<input type="hidden" name="enableVlan" value="enable">
<input type="hidden" name="enablePortbased" >
<input type="hidden" name="tags1" value="">
<input type="hidden" name="tags2" value="">
<input type="hidden" name="tags3" value="">

<input type="hidden" name="this_file" value="vlan.htm">
<input type="hidden" name="next_file" value="vlan.htm">

</form>
<p>
</p>
</body>
</html>

