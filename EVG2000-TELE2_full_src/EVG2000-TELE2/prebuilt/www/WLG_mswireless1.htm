<html>
<head>
<% meta_get(); %>
<meta HTTP-EQUIV="Expires" CONTENT="Mon, 06 Jan 1990 00:00:01 GMT">

<title>Wireless LAN Access Point - Configuration</title>
<link rel="stylesheet" href="form.css">
<STYLE TYPE="text/javascript">
    classes.num.all.fontFamily = "Courier";
    classes.num.all.fontSize = "10pt" ;
</style>
<script language="javascript" type="text/javascript" src="func.js"></script>
<script language="javascript" type="text/javascript" src="msg.js"></script>
<script language="javascript" type="text/javascript" src="utility.js"></script>
<script language="javascript" type="text/javascript" src="browser.js"></script>
<script language="javascript" type="text/javascript" src="md5.js"></script>
<script language="javascript" type="text/javascript">
<!-- hide script from old browsers

function initScrn()
{
    var defaultKey;
    var fm=document.forms[0];
    var i;

    fm.bssid_index.selectedIndex = fm.bssid_idx.value;
    
    if (fm.enable_ap.value == 1)
        fm.enable_ap_en.checked = true;
    else
        fm.enable_ap_en.checked = false;
    if (fm.ssid_bc.value == 1)
        fm.ssid_bc_en.checked = true;
    else
        fm.ssid_bc_en.checked = false;

    for (i=0; i<fm.authAlgm.length; i++)
    {
        if (fm.authAlgm[i].value == fm.initAuthType.value)
        {
            fm.authAlgm[i].selected = true;
            break;
        }
    }

    for (i=0; i<fm.wepenc.length; i++)
    {
        if (fm.wepenc[i].value == fm.initKeyLen.value)
        {
            fm.wepenc[i].selected = true;
            break;
        }
    }

    defaultKey = parseInt(fm.initDefaultKey.value);
    if ( defaultKey >= 0 && defaultKey <= 3)
        document.forms[0].wep_key_no[defaultKey].checked = true;
    else
        document.forms[0].wep_key_no[0].checked = true;
    initialized = true;
}
function setKeys()
{
    var cf = document.forms[0];
    cf.passphraseStr.disabled = false;
    cf.KEY1.disabled = cf.KEY2.disabled = cf.KEY3.disabled = cf.KEY4.disabled = false;
    if (cf.wepenc.selectedIndex == 0)
    {
        cf.keygen.disabled = false;
        cf.passphraseStr.disabled = false;        
        keysize = 10;
        cf.KEY1.size = cf.KEY2.size = cf.KEY3.size = cf.KEY4.size = keysize + 2 ; // extra for Mac
        if (cf.KEY1.value.length>10)
            cf.KEY1.value = cf.KEY1.value.substring(0,10);
        if (cf.KEY2.value.length>10)
            cf.KEY2.value = cf.KEY2.value.substring(0,10);
        if (cf.KEY3.value.length>10)
            cf.KEY3.value = cf.KEY3.value.substring(0,10);
        if (cf.KEY4.value.length>10)
            cf.KEY4.value = cf.KEY4.value.substring(0,10);
    }
    else if(cf.wepenc.selectedIndex == 1)
    {
        cf.keygen.disabled = false;
        cf.passphraseStr.disabled = false;        
        keysize = 26;
        cf.KEY1.size = cf.KEY2.size = cf.KEY3.size = cf.KEY4.size = keysize + 2; // extra for Mac
        if (cf.KEY1.value.length>26)
            cf.KEY1.value = cf.KEY1.value.substring(0,26);
        if (cf.KEY2.value.length>26)
            cf.KEY2.value = cf.KEY2.value.substring(0,26);
        if (cf.KEY3.value.length>26)
            cf.KEY3.value = cf.KEY3.value.substring(0,26);
        if (cf.KEY4.value.length>26)
            cf.KEY4.value = cf.KEY4.value.substring(0,26);
    }
    else if(cf.wepenc.selectedIndex == 2)
    {
        cf.keygen.disabled = true;
        cf.passphraseStr.disabled = true;
        keysize = 32;
        cf.KEY1.size = cf.KEY2.size = cf.KEY3.size = cf.KEY4.size = keysize + 2; // extra for Mac
    }
    //auto_disable();
}
function loadhelp(fname,anchname)
{
    if ((loadhelp.arguments.length == 1 ) || (anchname == "" ))
        top.helpframe.location.href=fname+"_h.htm";
    else
        top.helpframe.location.href=fname+"_h.htm#" + anchname;
}

function ch_bssid()
{
    var cf = document.forms[0];
    cf.bssid_change.value = "1";
    cf.submit();
}

function checkData()
{
    var msg_key64_type = "Invalid Key.\n\nKeys length should be 10 Hex (0~9 and A~F) chars. " + 
    "\nDefault key is required, other keys are optional.";
    var msg_key128_type = "Invalid Key.\n\nKeys length should be 26 Hex (0~9 and A~F) chars. " + 
    "\nDefault key is required, other keys are optional.";
    var msg_key152_type = "Invalid Key.\n\nKeys length should be 32 Hex (0~9 and A~F) chars. " + 
    "\nDefault key is required, other keys are optional.";

    var cf = document.forms[0];
    var msg = ""; var blankFlag = false; var sizeOK = false; var i;
    var len = (cf.wepenc.selectedIndex==0)?10:((cf.wepenc.selectedIndex==1)?26:32);

    for (i = 1; i < 5; i++ )
    {
        msg = "";
        blankFlag = ! (eval("(cf.wep_key_no[" + (i-1) + "].checked)")); // default key
        if( (blankFlag) && (eval("(cf.KEY" + i + ".value.length == 0)")) )
            continue; // blank ok
        sizeOK = ((eval("isHex(cf.KEY" + i +".value)")) && (eval("(cf.KEY" + i + ".value.length == len)")));
        if (!sizeOK)
        {
            msg = (len == 10)?msg_key64_type:((len==26)?msg_key128_type:msg_key152_type);
            alertR(msg);
            if (i==1)
                cf.KEY1.focus();
            else if (i==2)
                cf.KEY2.focus();
            else if (i==3)
                cf.KEY3.focus();
            else if (i==4)
                cf.KEY4.focus();
            return false;
        }
    }

    if (cf.ssid.value == "")
    {
        alert("SSID cannot be empty");
        return false;
    }

    if (cf.ssid.value.match( /[^\x20-\x7E]/ ))
    {
        alert("Character is not allowed in SSID.");
        cf.ssid.focus();
        return false;
    }

    if (!confirm("WEP security with Auto/Shared Key authentication cannot work with WPS. WPS is going to become inaccessible. Do you want to continue?"))
        return false;

    if(cf.enable_ap_en.checked)
	cf.enable_ap.value = 1;
    else
	cf.enable_ap.value = 0;
    if(cf.ssid_bc_en.checked)
	cf.ssid_bc.value = 1;
    else
	cf.ssid_bc.value = 0;
    return true;
}

var lastkeypressed;
var keyTooBig = false;
var mustbeHEX = false;
var keysize;
var lastObj;

if (document.layers) document.captureEvents(Event.KEYPRESS);
    document.onkeypress = checkKey;
function checkKey(evt)
{
    evt = (evt) ? evt : ((window.event) ? window.event : null);
    if (evt)
        lastkeypressed = (evt.keyCode) ? evt.keyCode : (evt.which ) ? evt.which : null;
    if ((lastkeypressed != 13) && (lastkeypressed != 8) && ( keyTooBig ))
    {
        keyTooBig = false;
        alert("Maximum Key length is " + keysize + " characters.");
        chkSize(lastObj); // for NS 6/7
        return false;
    }
    else if (mustbeHEX) // not used here, don't know which input is being used
    {
        mustbeHEX = false;
        if ( ((lastkeypressed > 47) && (lastkeypressed < 58 ))
            || ((lastkeypressed > 96) && (lastkeypressed < 103))
            || ((lastkeypressed > 64) && (lastkeypressed < 71 ))
            || (lastkeypressed == 8)
            || (lastkeypressed == 13) )
            return true; // OK
        else
            return false;
    }
    return true;
}
function chkSize(fobj)
{
    if(fobj.value.length > keysize)
        fobj.value = fobj.value.substr(0,keysize);
}
function keyCheck(fobj)
{
    lastObj = fobj;
    keyTooBig = (fobj.value.length >= keysize ) ? true : false;
}
function calcPassphrase(F)
{
    if(F.passphraseStr.value.length == 0)
        return;
    switch(F.wepenc.selectedIndex)
    {
        case 0:
            PassPhrase40(F);
            break;
        case 1:
            PassPhrase104(F);
            break;
        default:
            break;
    }
}
function PassPhrase40(F)
{
    var seed = 0;
    var pseed = new Array(0, 0, 0, 0);
    var pkey = new Array(4);
    var asciiObj = new Array(4);
    Length = F.passphraseStr.value.length;
    if(Length != 0)
    {
        for (i=0; i<Length; i++ )
            pseed[i%4] ^= F.passphraseStr.value.charCodeAt(i);
        seed = pseed[0];
        seed += pseed[1] << 8;
        seed += pseed[2] << 16;
        seed += pseed[3] << 24;
    }
    F.KEY1.value = F.KEY2.value = "";
    F.KEY3.value = F.KEY4.value = "";
    pkey[0] = F.KEY1;
    pkey[1] = F.KEY2;
    pkey[2] = F.KEY3;
    pkey[3] = F.KEY4;
    for(j=0; j<4; j++)
    {
        for (i=0; i<5 ;i++ )
        {
            seed = (214013 * seed) & 0xffffffff;
            if(seed & 0x80000000)
                seed = (seed & 0x7fffffff) + 0x80000000 + 0x269ec3;
            else
                seed = (seed & 0x7fffffff) + 0x269ec3;
            temp = ((seed >> 16) & 0xff);
            if(temp < 0x10)
                pkey[j].value += "0" + temp.toString(16).toUpperCase();
            else
                pkey[j].value += temp.toString(16).toUpperCase();
        }
    }
    F.wep_key_no[0].checked = true;
}
function PassPhrase104(F)
{
    var pseed2 = "";
    Length2 = F.passphraseStr.value.length;
    var asciiObj = "";
    for(p=0; p<64; p++)
    {
        tempCount = p % Length2;
        pseed2 += F.passphraseStr.value.substring(tempCount, tempCount+1);
    }
    md5Str = calcMD5(pseed2);
    F.KEY1.value = md5Str.substring(0, 26).toUpperCase();
    F.KEY2.value = F.KEY1.value;
    F.KEY3.value = F.KEY1.value;
    F.KEY4.value = F.KEY1.value;
    F.wep_key_no[0].checked = true;
    //F.KEY2.disabled = F.KEY3.disabled = F.KEY4.disabled = true;
}
// -->
</script>
</head>
<body bgcolor="#ffffff" onload="initScrn();setKeys();loadhelp('WLG_wireless');document.forms[0].elements[0].focus();">
<form method="POST" action="wlg_mswireless.cgi">
  <table border="0" cellpadding="0" cellspacing="3" width="100%">
    <tr>
      <td colspan="2"><h1>Wireless Settings</h1></td></tr>
    <tr>
      <td align="left">
         <select name="bssid_index" size="1" onChange="ch_bssid();">
         <option value="0">SSID1</option>
         <option value="1">SSID2</option>
         <option value="2">SSID3</option>
         <option value="3">SSID4</option>
        </select></td></tr>
      
      <!-- RULE -->
  <tr>
      <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td></tr>
    <tr>
      <td colspan="2"><a href="javascript:loadhelp('WLG_wireless','network')" tabindex="-1"><b>Wireless Network</b> </a></td></tr>
    <tr>
      <td width="50%" align="left">Name (SSID):</td>
      <td width="50%">
        <input type="text" name="ssid" value="<%wlg_cgi_get_ssid();%>" size="20" maxlength="32"></td></tr>
  <tr>
  <td colspan="2">
    <input type="checkbox"  name="enable_ap_en" value="enable_ap"> Enable </td></tr>
  <tr>
        <td nowrap colspan="2">
            <input type="checkbox"  name="ssid_bc_en" value="ssid_bc"> Allow Broadcast of Name (SSID) </td></tr>
    <tr>
        <!-- RULE -->
        <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td></tr>
    <tr>
      <td colspan="2"><a href="javascript:loadhelp('WLG_wireless','security')" tabindex="-1"><b>Security Options</b></a></td></tr>
<tr><td colspan="2">      
<table border="0" cellpadding="0" cellspacing="3" width="100%">      
    <tr>
      <td colspan="2"><input type="radio" name="security_type" value="Disable" onClick="this.form.submit();">Disable</td></tr>
    <tr>
      <td colspan="2"><input type="radio" name="security_type" value="WEP" checked >WEP</td></tr>
    <tr>
      <td colspan="2"><input type="radio" name="security_type" value="WPA-PSK" onClick="this.form.submit();" >WPA-PSK [TKIP]</td></tr>
    <tr>
      <td colspan="2"><input type="radio" name="security_type" value="WPA2-PSK" onClick="this.form.submit();">WPA2-PSK [AES]</td></tr>
    <tr>
      <td colspan="2"><input type="radio" name="security_type" value="AUTO-PSK" onClick="this.form.submit();">WPA-PSK [TKIP] + WPA2-PSK [AES]</td></tr>
</table>
</td></tr>
    <tr>
      <!-- RULE -->
      <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td></tr>
    <tr>
      <td colspan="2"><a href="javascript:loadhelp('WLG_wireless','wep')" tabindex="-1"><b>Security Encryption (WEP)</b></a></td></tr>
    <tr>
      <td nowrap>Authentication Type:</td>
      <td>
        <select name="authAlgm" size=1><option selected value="opensystem">Open System</option><option value="sharedkey">Shared Key</option></select></td></tr>
    <tr>
      <td nowrap>Encryption Strength:</td>
      <td><select name="wepenc" size=1 onchange="setKeys();"><option selected value="1">64bit</option><option value="2">128bit</option></select></td></tr>
    <tr>
      <!-- RULE -->
      <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td></tr>
    <tr>
      <td colspan="2"><a href="javascript:loadhelp('WLG_wireless','wepkey')" tabindex="-1"><b>Security Encryption (WEP) Key</b></a></td></tr>
    <tr>
      <td nowrap colspan="2">
        Passphrase: <input type="text" name="passphraseStr" size="14" maxlength="32" value=""> &nbsp;
        <input type="button" name="keygen" value="Generate" onClick="calcPassphrase(this.form)"></td></tr>
    <tr>
      <td colspan="2">
        <table>
          <tr>
            <td>Key 1:<input type="radio"  checked name="wep_key_no" value="1"></td>
            <td align=left><input type="text" name="KEY1" maxLength=32 size=34 value="<% wlg_cgi_get_keyval(1); %>" onkeydown="keyCheck(this)" onfocus="this.form.wep_key_no[0].checked=true;"></td></tr>
          <tr>
            <td>Key 2:<input type="radio" name="wep_key_no" value="2"></td>
            <td align=left><input type="text" name="KEY2" maxLength=32 size=34 value="<% wlg_cgi_get_keyval(2); %>" onkeydown="keyCheck(this)" onfocus="this.form.wep_key_no[1].checked=true;"></td></tr>
          <tr>
            <td>Key 3:<input type="radio" name="wep_key_no" value="3"></td>
            <td align=left><input type="text" name="KEY3" maxLength=32 size=34 value="<% wlg_cgi_get_keyval(3); %>" onkeydown="keyCheck(this)" onfocus="this.form.wep_key_no[2].checked=true;"></td></tr>
          <tr>
            <td>Key 4:<input type="radio" name="wep_key_no" value="4"></td>
            <td align=left><input type="text" name="KEY4" maxLength=32 size=34 value="<% wlg_cgi_get_keyval(4); %>" onkeydown="keyCheck(this)" onfocus="this.form.wep_key_no[3].checked=true;"></td></tr>
        </table></td></TR>
    <tr>
      <!-- RULE -->
      <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td></tr>
    <tr>
      <td colspan="2" align="center">
      <input type="SUBMIT" name="Apply" value="Apply" onclick="return checkData();">
      <input type="SUBMIT" name="Cancel" value="Cancel"></td></tr>
  </table>
  <input type="hidden" name="bssid_idx" value="<% wlg_cgi_get_bssid_index(); %>">
  <input type="hidden" name="initAuthType" value="<% wlg_cgi_get_authtype(); %>">
  <input type="hidden" name="initKeyLen" value="<% wlg_cgi_get_keylen(); %>">
  <input type="hidden" name="initDefaultKey" value="<% wlg_cgi_get_defaultkey(); %>">
  <INPUT name=enable_ap type=hidden value= "<%wlg_cgi_get_wlanstate_status(); %>">
  <INPUT name=ssid_bc type=hidden value= "<% wlg_cgi_get_broadcast_status(); %>">
  <input type="hidden" name="tempSetting" value="<% wlg_cgi_get_temp_setting("wla_temp_setting"); %>">
  <input type="hidden" name="bssid_change" value="0">
</form>
<p>
</p>
</body>
</html>

